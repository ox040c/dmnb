// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TableProtobuf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TableProtobuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TableProtobuf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableProtobuf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TableProtobuf_2eproto() {
  protobuf_AddDesc_TableProtobuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TableProtobuf.proto");
  GOOGLE_CHECK(file != NULL);
  TableProtobuf_descriptor_ = file->message_type(0);
  static const int TableProtobuf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableProtobuf, totalint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableProtobuf, totalfloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableProtobuf, totalchar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableProtobuf, names_),
  };
  TableProtobuf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableProtobuf_descriptor_,
      TableProtobuf::default_instance_,
      TableProtobuf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableProtobuf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableProtobuf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableProtobuf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TableProtobuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableProtobuf_descriptor_, &TableProtobuf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TableProtobuf_2eproto() {
  delete TableProtobuf::default_instance_;
  delete TableProtobuf_reflection_;
}

void protobuf_AddDesc_TableProtobuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023TableProtobuf.proto\"W\n\rTableProtobuf\022\020"
    "\n\010totalInt\030\001 \002(\005\022\022\n\ntotalFloat\030\002 \002(\005\022\021\n\t"
    "totalChar\030\003 \002(\005\022\r\n\005names\030\004 \002(\t", 110);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TableProtobuf.proto", &protobuf_RegisterTypes);
  TableProtobuf::default_instance_ = new TableProtobuf();
  TableProtobuf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TableProtobuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TableProtobuf_2eproto {
  StaticDescriptorInitializer_TableProtobuf_2eproto() {
    protobuf_AddDesc_TableProtobuf_2eproto();
  }
} static_descriptor_initializer_TableProtobuf_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TableProtobuf::kTotalIntFieldNumber;
const int TableProtobuf::kTotalFloatFieldNumber;
const int TableProtobuf::kTotalCharFieldNumber;
const int TableProtobuf::kNamesFieldNumber;
#endif  // !_MSC_VER

TableProtobuf::TableProtobuf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TableProtobuf)
}

void TableProtobuf::InitAsDefaultInstance() {
}

TableProtobuf::TableProtobuf(const TableProtobuf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TableProtobuf)
}

void TableProtobuf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  totalint_ = 0;
  totalfloat_ = 0;
  totalchar_ = 0;
  names_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableProtobuf::~TableProtobuf() {
  // @@protoc_insertion_point(destructor:TableProtobuf)
  SharedDtor();
}

void TableProtobuf::SharedDtor() {
  if (names_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete names_;
  }
  if (this != default_instance_) {
  }
}

void TableProtobuf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableProtobuf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableProtobuf_descriptor_;
}

const TableProtobuf& TableProtobuf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TableProtobuf_2eproto();
  return *default_instance_;
}

TableProtobuf* TableProtobuf::default_instance_ = NULL;

TableProtobuf* TableProtobuf::New() const {
  return new TableProtobuf;
}

void TableProtobuf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TableProtobuf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(totalint_, totalfloat_);
    totalchar_ = 0;
    if (has_names()) {
      if (names_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        names_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableProtobuf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TableProtobuf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 totalInt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalint_)));
          set_has_totalint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_totalFloat;
        break;
      }

      // required int32 totalFloat = 2;
      case 2: {
        if (tag == 16) {
         parse_totalFloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalfloat_)));
          set_has_totalfloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalChar;
        break;
      }

      // required int32 totalChar = 3;
      case 3: {
        if (tag == 24) {
         parse_totalChar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalchar_)));
          set_has_totalchar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_names;
        break;
      }

      // required string names = 4;
      case 4: {
        if (tag == 34) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->names().data(), this->names().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TableProtobuf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TableProtobuf)
  return false;
#undef DO_
}

void TableProtobuf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TableProtobuf)
  // required int32 totalInt = 1;
  if (has_totalint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalint(), output);
  }

  // required int32 totalFloat = 2;
  if (has_totalfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalfloat(), output);
  }

  // required int32 totalChar = 3;
  if (has_totalchar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalchar(), output);
  }

  // required string names = 4;
  if (has_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names().data(), this->names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "names");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->names(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TableProtobuf)
}

::google::protobuf::uint8* TableProtobuf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TableProtobuf)
  // required int32 totalInt = 1;
  if (has_totalint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalint(), target);
  }

  // required int32 totalFloat = 2;
  if (has_totalfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalfloat(), target);
  }

  // required int32 totalChar = 3;
  if (has_totalchar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalchar(), target);
  }

  // required string names = 4;
  if (has_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names().data(), this->names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "names");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->names(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TableProtobuf)
  return target;
}

int TableProtobuf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 totalInt = 1;
    if (has_totalint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalint());
    }

    // required int32 totalFloat = 2;
    if (has_totalfloat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalfloat());
    }

    // required int32 totalChar = 3;
    if (has_totalchar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalchar());
    }

    // required string names = 4;
    if (has_names()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->names());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableProtobuf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableProtobuf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableProtobuf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableProtobuf::MergeFrom(const TableProtobuf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalint()) {
      set_totalint(from.totalint());
    }
    if (from.has_totalfloat()) {
      set_totalfloat(from.totalfloat());
    }
    if (from.has_totalchar()) {
      set_totalchar(from.totalchar());
    }
    if (from.has_names()) {
      set_names(from.names());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableProtobuf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableProtobuf::CopyFrom(const TableProtobuf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableProtobuf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TableProtobuf::Swap(TableProtobuf* other) {
  if (other != this) {
    std::swap(totalint_, other->totalint_);
    std::swap(totalfloat_, other->totalfloat_);
    std::swap(totalchar_, other->totalchar_);
    std::swap(names_, other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableProtobuf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableProtobuf_descriptor_;
  metadata.reflection = TableProtobuf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
